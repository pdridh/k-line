// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: tables.sql

package sqlc

import (
	"context"
)

const getTableByID = `-- name: GetTableByID :one
SELECT id, capacity, status, notes FROM tables
WHERE id = $1
`

func (q *Queries) GetTableByID(ctx context.Context, id string) (Table, error) {
	row := q.db.QueryRow(ctx, getTableByID, id)
	var i Table
	err := row.Scan(
		&i.ID,
		&i.Capacity,
		&i.Status,
		&i.Notes,
	)
	return i, err
}

const getTables = `-- name: GetTables :many
SELECT id, capacity, status, notes FROM tables
WHERE status = $1
`

func (q *Queries) GetTables(ctx context.Context, status TableStatus) ([]Table, error) {
	rows, err := q.db.Query(ctx, getTables, status)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Table
	for rows.Next() {
		var i Table
		if err := rows.Scan(
			&i.ID,
			&i.Capacity,
			&i.Status,
			&i.Notes,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTableStatus = `-- name: UpdateTableStatus :exec
UPDATE tables
SET status = $1
WHERE id = $2
`

type UpdateTableStatusParams struct {
	Status TableStatus `db:"status"`
	ID     string      `db:"id"`
}

func (q *Queries) UpdateTableStatus(ctx context.Context, arg UpdateTableStatusParams) error {
	_, err := q.db.Exec(ctx, updateTableStatus, arg.Status, arg.ID)
	return err
}
