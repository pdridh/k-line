// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0

package sqlc

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type UserType string

const (
	UserTypeWaiter  UserType = "waiter"
	UserTypeKitchen UserType = "kitchen"
	UserTypeAdmin   UserType = "admin"
)

func (e *UserType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UserType(s)
	case string:
		*e = UserType(s)
	default:
		return fmt.Errorf("unsupported scan type for UserType: %T", src)
	}
	return nil
}

type NullUserType struct {
	UserType UserType
	Valid    bool // Valid is true if UserType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUserType) Scan(value interface{}) error {
	if value == nil {
		ns.UserType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UserType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUserType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UserType), nil
}

type MenuItem struct {
	ID             int32            `db:"id"`
	Name           string           `db:"name"`
	Description    pgtype.Text      `db:"description"`
	Price          float64          `db:"price"`
	RequiresTicket bool             `db:"requires_ticket"`
	CreatedAt      pgtype.Timestamp `db:"created_at"`
}

type User struct {
	ID        pgtype.UUID      `db:"id"`
	Email     string           `db:"email"`
	Name      string           `db:"name"`
	Type      UserType         `db:"type"`
	Password  string           `db:"password"`
	CreatedAt pgtype.Timestamp `db:"created_at"`
}
