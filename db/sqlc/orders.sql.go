// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: orders.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addOrderItemsBulk = `-- name: AddOrderItemsBulk :exec
INSERT INTO order_items (order_id, item_id, quantity, notes)
SELECT $1, unnest($2::int[]), unnest($3::int[]), unnest($4::text[])
`

type AddOrderItemsBulkParams struct {
	OrderID  pgtype.UUID `db:"order_id"`
	ItemIds  []int32     `db:"item_ids"`
	Quantity []int32     `db:"quantity"`
	Notes    []string    `db:"notes"`
}

func (q *Queries) AddOrderItemsBulk(ctx context.Context, arg AddOrderItemsBulkParams) error {
	_, err := q.db.Exec(ctx, addOrderItemsBulk,
		arg.OrderID,
		arg.ItemIds,
		arg.Quantity,
		arg.Notes,
	)
	return err
}

const createOrder = `-- name: CreateOrder :one
INSERT INTO orders (
  type,
  employee_id,
  table_id
) VALUES (
  $1, $2, $3
) RETURNING id
`

type CreateOrderParams struct {
	Type       OrderType   `db:"type"`
	EmployeeID pgtype.UUID `db:"employee_id"`
	TableID    pgtype.Text `db:"table_id"`
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) (pgtype.UUID, error) {
	row := q.db.QueryRow(ctx, createOrder, arg.Type, arg.EmployeeID, arg.TableID)
	var id pgtype.UUID
	err := row.Scan(&id)
	return id, err
}

const getOrderByID = `-- name: GetOrderByID :one
SELECT id, type, employee_id, status, table_id, created_at, completed_at FROM orders 
WHERE id = $1
`

func (q *Queries) GetOrderByID(ctx context.Context, id pgtype.UUID) (Order, error) {
	row := q.db.QueryRow(ctx, getOrderByID, id)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.EmployeeID,
		&i.Status,
		&i.TableID,
		&i.CreatedAt,
		&i.CompletedAt,
	)
	return i, err
}

const getOrderItemByID = `-- name: GetOrderItemByID :one
SELECT id, order_id, item_id, quantity, notes, status, added_at FROM order_items
WHERE order_id = $1 AND id = $2
`

type GetOrderItemByIDParams struct {
	OrderID pgtype.UUID `db:"order_id"`
	ID      int64       `db:"id"`
}

func (q *Queries) GetOrderItemByID(ctx context.Context, arg GetOrderItemByIDParams) (OrderItem, error) {
	row := q.db.QueryRow(ctx, getOrderItemByID, arg.OrderID, arg.ID)
	var i OrderItem
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.ItemID,
		&i.Quantity,
		&i.Notes,
		&i.Status,
		&i.AddedAt,
	)
	return i, err
}

const updateOrderItemStatus = `-- name: UpdateOrderItemStatus :exec
UPDATE order_items
SET status = $1
WHERE order_id = $2 AND id = $3
`

type UpdateOrderItemStatusParams struct {
	Status  OrderItemStatus `db:"status"`
	OrderID pgtype.UUID     `db:"order_id"`
	ID      int64           `db:"id"`
}

func (q *Queries) UpdateOrderItemStatus(ctx context.Context, arg UpdateOrderItemStatusParams) error {
	_, err := q.db.Exec(ctx, updateOrderItemStatus, arg.Status, arg.OrderID, arg.ID)
	return err
}
