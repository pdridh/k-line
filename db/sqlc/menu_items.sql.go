// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: menu_items.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createMenuItem = `-- name: CreateMenuItem :one
INSERT INTO menu_items (
  name,
  description,
  price,
  requires_ticket
) VALUES (
  $1, $2, $3, $4
) RETURNING id, name, description, price, requires_ticket, created_at
`

type CreateMenuItemParams struct {
	Name           string      `db:"name"`
	Description    pgtype.Text `db:"description"`
	Price          float64     `db:"price"`
	RequiresTicket bool        `db:"requires_ticket"`
}

func (q *Queries) CreateMenuItem(ctx context.Context, arg CreateMenuItemParams) (MenuItem, error) {
	row := q.db.QueryRow(ctx, createMenuItem,
		arg.Name,
		arg.Description,
		arg.Price,
		arg.RequiresTicket,
	)
	var i MenuItem
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Price,
		&i.RequiresTicket,
		&i.CreatedAt,
	)
	return i, err
}

const getItemByID = `-- name: GetItemByID :one
SELECT id, name, description, price, requires_ticket, created_at FROM menu_items
WHERE id = $1 
LIMIT 1
`

func (q *Queries) GetItemByID(ctx context.Context, id int32) (MenuItem, error) {
	row := q.db.QueryRow(ctx, getItemByID, id)
	var i MenuItem
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Price,
		&i.RequiresTicket,
		&i.CreatedAt,
	)
	return i, err
}

const getMenuItems = `-- name: GetMenuItems :many
SELECT id, name, description, price, requires_ticket, created_at FROM menu_items
WHERE ($3::text IS NULL OR name ILIKE '%' || $3::text || '%')
ORDER BY name
LIMIT $1
OFFSET $2
`

type GetMenuItemsParams struct {
	Limit  int32  `db:"limit"`
	Offset int32  `db:"offset"`
	Search string `db:"search"`
}

func (q *Queries) GetMenuItems(ctx context.Context, arg GetMenuItemsParams) ([]MenuItem, error) {
	rows, err := q.db.Query(ctx, getMenuItems, arg.Limit, arg.Offset, arg.Search)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []MenuItem
	for rows.Next() {
		var i MenuItem
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Price,
			&i.RequiresTicket,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
